class EvenStream(object):
    def __init__(self):
        self.current = 0

    def get_next(self):
        to_return = self.current
        self.current += 2
        return to_return

class OddStream(object):
    def __init__(self):
        self.current = 1

    def get_next(self):
        to_return = self.current
        self.current += 2
        return to_return
    
def print_from_stream(n, stream=EvenStream()):
    stream.__init__()
    for _ in range(n):
        print(stream.get_next())


queries = int(input())
for _ in range(queries):
    stream_name, n = input().split()
    n = int(n)
    if stream_name == "even":
        print_from_stream(n)
    else:
        print_from_stream(n, OddStream())


#from https://docs.python-guide.org/writing/gotchas/
#Pythonâ€™s default arguments are evaluated once when the function is defined, not each time the function is called (like it is in say, Ruby). 
# because if we use an object as a default argument in python it's only' 
# initialised once when the function is defined and is reused every time there 
# is need for the default argument. hence only the odd function's variable was' 
# ' resetting, While the even's was adding up as the object for even wascreated at 
# the first use and so the init was only invoked once. so invoking the constructor
# every time the streams are called will reset the class variable everytime.
